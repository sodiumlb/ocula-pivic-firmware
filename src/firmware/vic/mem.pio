/*
 * Copyright (c) 2025 Sodiumlightbaby
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */


; RAM emulation - read & write from/to xram
; Address of the memory to read from is set in x by setup
; DMA setup required to take the address, fetch data and return
; Autopull and autpush used
.program xread
.clock_div 2.0
.in 14 left auto 14
.out 8 right auto 8
.wrap_target
    mov isr x           ; Base address to fetch from in the system
    wait 0 irq 0   [24] ; sample address after phi1 falling edge 
    in pins 14          ; Pull in rest of address from 6502
    out pins 8          ; Blocking till data returns. pindirs set elsewhere
.wrap

; Address of the memory to write to is set in x by setup
; DMA setup required to take the address then data and write to memory
; VIC-20 specifics - assumes RnW is gated by clock 
; A14 = '0' for BLK4 writes - data in same CPU period
; A14 = '1' for non BLK4 writes - data in following VIC period
.program xwrite
.clock_div 2.0
.in 32 left
.out 32 right
.wrap_target
start:
    mov isr x           ; System top address bits
    wait 0 pin 26  [20] ; Wait for RnW falling edge == write + 200ns
    mov osr pins        ; Capture D[7:0],D[11:8],A[13:0],RnW
    out y 12            ; Keep D[11:0] in y (in case BLK4)
    in osr 14           ; shift in bottom address
    wait 1 pin 26       ; Wait for RnW rising edge before capturing not BLK4 data
    push noblock   [20] ; Send address to FIFO + 200ns data setup time
    mov isr pins        ; Assume not BLK4, capture new data in isr
    jmp pin not_blk4    ; If A13=='1', this write is not for BLK4
    mov isr y           ; BLK4 write, use data from y
not_blk4:
    push noblock        ; Send data to FIFO
.wrap

; Direction control of data bus
; Enable output when address in x (set by setup)
; matches incoming address and read is enabled

.program xdir
.clock_div 2.0
.in 7 left
.out 8 right
.wrap_target
start:
    wait 0 irq 1   [29] ; Wait for phi1 rising edge + ca 200ns for data hold
    mov pindirs null    ; Disable data pins output
    wait 0 irq 0   [29] ; Wait for phi1 falling edge + ca 200ns for address hold
    mov y pins          ; Get A[13:8],RnW
    jmp x!=y start      ; If not reading of registers, goto start 
    irq set 2           ; Signal trace
    mov pindirs ~null   ; Set data pins to output
.wrap

; Bus tracing function
; TODO Not updated for VIC integration yet
.program trace
.in 27 left auto 27
.wrap_target
    wait 1 irq 2 [0]
    in pins 27
.wrap